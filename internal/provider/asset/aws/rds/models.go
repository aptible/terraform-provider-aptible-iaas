package rds

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"

	cac "github.com/aptible/cloud-api-clients/clients/go"
	"github.com/aptible/terraform-provider-aptible-iaas/internal/client"
	assetutil "github.com/aptible/terraform-provider-aptible-iaas/internal/provider/asset/util"
	"github.com/aptible/terraform-provider-aptible-iaas/internal/util"
)

var resourceTypeName = "_aws_rds"
var resourceDescription = "RDS resource"

// TODO - autogenerated
type ResourceModel struct {
	Id             types.String `tfsdk:"id" json:"id"`
	AssetVersion   types.String `tfsdk:"asset_version" json:"asset_version"`
	EnvironmentId  types.String `tfsdk:"environment_id" json:"environment_id"`
	OrganizationId types.String `tfsdk:"organization_id" json:"organization_id"`
	Status         types.String `tfsdk:"status" json:"status"`

	VpcName          types.String `tfsdk:"vpc_name" json:"vpc_name"`
	Name             types.String `tfsdk:"name" json:"name"`
	Engine           types.String `tfsdk:"engine" json:"engine"`
	EngineVersion    types.String `tfsdk:"engine_version" json:"engine_version"`
	UriSecretArn     types.String `tfsdk:"uri_secret_arn" json:"uri_secret_arn"`
	SecretsKmsKeyArn types.String `tfsdk:"secrets_kms_key_arn" json:"rds_secrets_kms_key_arn"`
	DBIdentifier     types.String `tfsdk:"db_identifier" json:"db_identifier"`
}

var AssetSchema = map[string]tfsdk.Attribute{
	"id": {
		Description: "A valid asset id",
		Type:        types.StringType,
		Computed:    true,
	},
	"status": {
		Type:     types.StringType,
		Computed: true,
	},

	"environment_id": {
		Description: "A valid environment id",
		Type:        types.StringType,
		Required:    true,
	},
	"organization_id": {
		Description: "A valid organization id",
		Type:        types.StringType,
		Required:    true,
	},
	"vpc_name": {
		Description: "A valid vpc name",
		Type:        types.StringType,
		Required:    true,
	},
	"asset_version": {
		Type:     types.StringType,
		Computed: true,
	},
	"name": {
		Type:     types.StringType,
		Required: true,
	},
	"engine": {
		Description: "A valid db engine",
		Type:        types.StringType,
		Required:    true,
	},
	"engine_version": {
		Description: "A valid db engine version",
		Type:        types.StringType,
		Required:    true,
	},
	"uri_secret_arn": {
		Computed: true,
		Type:     types.StringType,
	},
	"secrets_kms_key_arn": {
		Computed: true,
		Type:     types.StringType,
	},
	"db_identifier": {
		Computed: true,
		Type:     types.StringType,
	},
}

func planToAssetInput(ctx context.Context, plan ResourceModel) (cac.AssetInput, error) {
	input := cac.AssetInput{
		Asset:        client.CompileAsset("aws", "rds", assetutil.DefaultAssetVersion),
		AssetVersion: assetutil.DefaultAssetVersion,
		AssetParameters: map[string]interface{}{
			"vpc_name":       plan.VpcName.Value,
			"name":           plan.Name.Value,
			"engine":         plan.Engine.Value,
			"engine_version": plan.EngineVersion.Value,
		},
	}

	return input, nil
}

func assetOutputToPlan(ctx context.Context, plan ResourceModel, output *cac.AssetOutput) (*ResourceModel, error) {
	outputs := *output.Outputs

	model := &ResourceModel{
		Id:               types.String{Value: output.Id},
		AssetVersion:     types.String{Value: output.AssetVersion},
		EnvironmentId:    types.String{Value: output.Environment.Id},
		OrganizationId:   types.String{Value: output.Environment.Organization.Id},
		Status:           types.String{Value: string(output.Status)},
		VpcName:          types.String{Value: output.CurrentAssetParameters.Data["vpc_name"].(string)},
		Name:             types.String{Value: output.CurrentAssetParameters.Data["name"].(string)},
		Engine:           types.String{Value: output.CurrentAssetParameters.Data["engine"].(string)},
		EngineVersion:    types.String{Value: output.CurrentAssetParameters.Data["engine_version"].(string)},
		UriSecretArn:     types.String{Value: util.SafeString(outputs["uri_secret_arn"].Data)},
		SecretsKmsKeyArn: types.String{Value: util.SafeString(outputs["rds_secrets_kms_key_arn"].Data)},
		DBIdentifier:     types.String{Value: util.SafeString(outputs["db_identifier"].Data)},
	}

	return model, nil
}
