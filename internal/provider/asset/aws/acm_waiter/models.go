package acmwaiter

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"

	cac "github.com/aptible/cloud-api-clients/clients/go"
	"github.com/aptible/terraform-provider-aptible-iaas/internal/client"
	"github.com/aptible/terraform-provider-aptible-iaas/internal/util"
)

var resourceTypeName = "_aws_acm_waiter"
var resourceDescription = "ACM certificate waiter resource"

// TODO - autogenerated
type ResourceModel struct {
	Id             types.String `tfsdk:"id" json:"id"`
	AssetVersion   types.String `tfsdk:"asset_version" json:"asset_version"`
	EnvironmentId  types.String `tfsdk:"environment_id" json:"environment_id"`
	OrganizationId types.String `tfsdk:"organization_id" json:"organization_id"`
	Status         types.String `tfsdk:"status" json:"status"`

	CertificateArn  types.String `tfsdk:"certificate_arn"`
	ValidationFqdns types.String `tfsdk:"validation_fqdns"`
}

var AssetSchema = map[string]tfsdk.Attribute{
	"id": {
		Description: "A valid asset id",
		Type:        types.StringType,
		Computed:    true,
	},
	"status": {
		Type:     types.StringType,
		Computed: true,
	},

	"environment_id": {
		Description: "A valid environment id",
		Type:        types.StringType,
		Required:    true,
	},
	"organization_id": {
		Description: "A valid organization id",
		Type:        types.StringType,
		Required:    true,
	},
	"asset_version": {
		Type:     types.StringType,
		Required: true,
	},
	"arn": {
		Required: true,
		Type:     types.StringType,
	},
	"validation_fqdns": {
		Optional:    true,
		Type:        types.StringType,
		Description: "The DNS Records created to enable validation. This should include the validation records for both the primary domain and any SANs. Do not set if using EMAIL based validation.",
	},
}

func planToAssetInput(ctx context.Context, plan ResourceModel) (cac.AssetInput, error) {
	params := map[string]interface{}{
		"certificate_arn": plan.CertificateArn.Value,
	}

	if util.StringHasVal(plan.ValidationFqdns) {
		params["validation_fqdns"] = plan.ValidationFqdns.Value
	}

	input := cac.AssetInput{
		Asset:           client.CompileAsset("aws", "acm_certificate", plan.AssetVersion.Value),
		AssetVersion:    plan.AssetVersion.Value,
		AssetParameters: params,
	}

	return input, nil
}

func assetOutputToPlan(ctx context.Context, plan ResourceModel, output *cac.AssetOutput) (*ResourceModel, error) {
	model := &ResourceModel{
		Id:              types.String{Value: output.Id},
		AssetVersion:    types.String{Value: output.AssetVersion},
		EnvironmentId:   types.String{Value: output.Environment.Id},
		OrganizationId:  types.String{Value: output.Environment.Organization.Id},
		Status:          types.String{Value: string(output.Status)},
		CertificateArn:  types.String{Value: output.CurrentAssetParameters.Data["certificate_arn"].(string)},
		ValidationFqdns: util.StringVal(output.CurrentAssetParameters.Data["validation_fqdns"]),
	}

	return model, nil
}
