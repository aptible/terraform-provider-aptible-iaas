package acm

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"

	cloud_api_client "github.com/aptible/cloud-api-clients/clients/go"
)

type DnsValidationRecordJson struct {
	DomainName  string `json:"domain_name"`
	RecordName  string `json:"resource_record_name"`
	RecordType  string `json:"resource_record_type"`
	RecordValue string `json:"resource_record_value"`
}

type DnsValidationRecord struct {
	DomainName  types.String `tfsdk:"domain_name"`
	RecordName  types.String `tfsdk:"resource_record_name"`
	RecordType  types.String `tfsdk:"resource_record_type"`
	RecordValue types.String `tfsdk:"resource_record_value"`
}

// TODO - autogenerated
type ACM struct {
	Id             types.String `tfsdk:"id" json:"id"`
	AssetVersion   types.String `tfsdk:"asset_version" json:"asset_version"`
	EnvironmentId  types.String `tfsdk:"environment_id" json:"environment_id"`
	OrganizationId types.String `tfsdk:"organization_id" json:"organization_id"`
	Status         types.String `tfsdk:"status" json:"status"`

	Fqdn                    types.String          `tfsdk:"fqdn" json:"fqdn"`
	ValidationMethod        types.String          `tfsdk:"validation_method" json:"validation_method"`
	Arn                     types.String          `tfsdk:"arn" json:"arn"`
	DomainValidationRecords []DnsValidationRecord `tfsdk:"domain_validation_records"`
}

var AssetSchema = map[string]tfsdk.Attribute{
	"id": {
		Description: "A valid asset id",
		Type:        types.StringType,
		Computed:    true,
	},
	"status": {
		Type:     types.StringType,
		Computed: true,
	},

	"environment_id": {
		Description: "A valid environment id",
		Type:        types.StringType,
		Required:    true,
	},
	"organization_id": {
		Description: "A valid organization id",
		Type:        types.StringType,
		Required:    true,
	},
	"asset_version": {
		Type:     types.StringType,
		Required: true,
	},
	"fqdn": {
		Type:     types.StringType,
		Required: true,
	},
	"validation_method": {
		Description: "A valid validation method",
		Type:        types.StringType,
		Required:    true,
	},
	"arn": {
		Computed: true,
		Type:     types.StringType,
	},
	"domain_validation_records": {
		Computed: true,
		Optional: true,
		/* PlanModifiers: tfsdk.AttributePlanModifiers{
			tfsdk.UseStateForUnknown(),
		}, */
		Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
			"domain_name": {
				Type:     types.StringType,
				Computed: true,
				Optional: true,
				/* PlanModifiers: tfsdk.AttributePlanModifiers{
					tfsdk.UseStateForUnknown(),
				}, */
			},
			"resource_record_name": {
				Type:     types.StringType,
				Computed: true,
				Optional: true,
				/* PlanModifiers: tfsdk.AttributePlanModifiers{
					tfsdk.UseStateForUnknown(),
				}, */
			},
			"resource_record_type": {
				Type:     types.StringType,
				Computed: true,
				Optional: true,
				/* PlanModifiers: tfsdk.AttributePlanModifiers{
					tfsdk.UseStateForUnknown(),
				}, */
			},
			"resource_record_value": {
				Type:     types.StringType,
				Computed: true,
				Optional: true,
				/* PlanModifiers: tfsdk.AttributePlanModifiers{
					tfsdk.UseStateForUnknown(),
				}, */
			},
		}),
	},
}

func GenerateResourceFromAssetOutput(output *cloud_api_client.AssetOutput) (*ACM, error) {
	outputs := *output.Outputs

	records := []DnsValidationRecord{}
	if recs, ok := outputs["domain_validation_records"]; ok {
		recordsJson := []DnsValidationRecordJson{}
		bts, err := json.Marshal(recs.Data)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(bts, &recordsJson)
		if err != nil {
			return nil, err
		}

		for _, record := range recordsJson {
			records = append(records, DnsValidationRecord{
				DomainName:  types.String{Value: record.DomainName},
				RecordName:  types.String{Value: record.RecordName},
				RecordType:  types.String{Value: record.RecordType},
				RecordValue: types.String{Value: record.RecordValue},
			})
		}
	}

	model := &ACM{
		Id:                      types.String{Value: output.Id},
		AssetVersion:            types.String{Value: output.AssetVersion},
		EnvironmentId:           types.String{Value: output.Environment.Id},
		OrganizationId:          types.String{Value: output.Environment.Organization.Id},
		Status:                  types.String{Value: string(output.Status)},
		Fqdn:                    types.String{Value: output.CurrentAssetParameters.Data["fqdn"].(string)},
		ValidationMethod:        types.String{Value: output.CurrentAssetParameters.Data["validation_method"].(string)},
		Arn:                     types.String{Value: outputs["acm_certificate_arn"].Data.(string)},
		DomainValidationRecords: records,
	}

	return model, nil
}
